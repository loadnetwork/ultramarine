name: Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  # ============================================================================
  # Cross-platform Builds (uses Makefile)
  # ============================================================================
  build:
    name: Cross-platform Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install development tools
        run: make tools

      - name: Install cross-compilation tools
        run: cargo install cross --locked

      - name: Cross-compile binary
        run: make build-${{ matrix.target }}
        env:
          PROFILE: release

      - name: Prepare release binary
        run: |
          mkdir -p release/
          binary_name="ultramarine-${{ matrix.target }}"

          # Copy binary from target directory
          if [[ -f "target/${{ matrix.target }}/release/ultramarine.exe" ]]; then
            cp "target/${{ matrix.target }}/release/ultramarine.exe" "release/${binary_name}.exe"
          else
            cp "target/${{ matrix.target }}/release/ultramarine" "release/${binary_name}"
          fi

          # Create tarball
          cd release/
          if [[ -f "${binary_name}.exe" ]]; then
            tar -czf "${binary_name}.tar.gz" "${binary_name}.exe"
          else
            tar -czf "${binary_name}.tar.gz" "${binary_name}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ultramarine-${{ matrix.target }}
          path: release/*.tar.gz
          retention-days: 7

  # ============================================================================
  # Create GitHub Release (uses Makefile for validation)
  # ============================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install development tools
        run: make tools

      - name: Validate release readiness
        run: make release-dry

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release/
          find artifacts/ -name "*.tar.gz" -exec cp {} release/ \;

          # Generate checksums
          cd release/
          sha256sum *.tar.gz > checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          # Get the tag name
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 "${TAG}^" 2>/dev/null || echo "")

          # Generate changelog
          if [[ -n "$PREV_TAG" ]]; then
            echo "## Changes from ${PREV_TAG} to ${TAG}" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" "${PREV_TAG}..${TAG}" >> changelog.md
          else
            echo "## Initial Release ${TAG}" > changelog.md
            echo "" >> changelog.md
            echo "First release of Ultramarine consensus client." >> changelog.md
          fi

          # Set output
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Get tag name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: release/*
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Trigger Docker Release Build
  # ============================================================================
  docker-release:
    name: Docker Release Build
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install development tools
        run: make tools

      - name: Install cross-compilation tools
        run: cargo install cross --locked

      - name: Get tag name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push release Docker images
        run: make docker-build-push-latest
        env:
          DOCKER_IMAGE_NAME: loadnetwork/ultramarine
