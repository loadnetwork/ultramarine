name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  merge_group:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ----------------------------------------------------------------------------
  # Format (nightly rustfmt)
  # ----------------------------------------------------------------------------
  fmt:
    name: Format
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Setup Rust 1.89
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89
          components: rustfmt, clippy, llvm-tools-preview

      - name: Install nightly rustfmt (for fmt-check)
        run: |
          rustup toolchain install nightly --profile=minimal
          rustup component add --toolchain nightly rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: fmt-check
        run: make fmt-check

  # ----------------------------------------------------------------------------
  # Sort (cargo-sort)
  # ----------------------------------------------------------------------------
  sort:
    name: Sort
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Setup Rust 1.89
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89
          components: rustfmt, clippy, llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-sort (pinned)
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-sort@2.0.1

      - name: Show cargo-sort version
        run: cargo sort --version

      - name: sort-check
        run: make sort-check

  # ----------------------------------------------------------------------------
  # Clippy (stable 1.89)
  # ----------------------------------------------------------------------------
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Setup Rust 1.89
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89
          components: clippy, rustfmt, llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (protoc)
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libclang-dev pkg-config protobuf-compiler

      - name: clippy
        run: make clippy
        env:
          RUSTFLAGS: "-D warnings"

  # ----------------------------------------------------------------------------
  # Tests (runs only if linting passed)
  # ----------------------------------------------------------------------------
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [fmt, sort, clippy]
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Setup Rust 1.89
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89
          components: rustfmt, clippy, llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (protoc)
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libclang-dev pkg-config protobuf-compiler

      - name: test
        run: make test

  # ----------------------------------------------------------------------------
  # Docs (build + upload)
  # ----------------------------------------------------------------------------
  docs:
    name: Docs
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Setup Rust 1.89
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89

      - uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (protoc)
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libclang-dev pkg-config protobuf-compiler

      - name: Build docs (public API)
        run: cargo doc --workspace --all-features --no-deps
        env:
          RUSTDOCFLAGS: "-D warnings"

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-docs
          path: target/doc
          retention-days: 7

  # ----------------------------------------------------------------------------
  # Coverage (main or PRs with [coverage] in title)
  # ----------------------------------------------------------------------------
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[coverage]')) }}
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Setup Rust 1.89
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89
          components: rustfmt, clippy, llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (protoc)
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libclang-dev pkg-config protobuf-compiler

      # Install tooling separately so the action parses them as separate crates
      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      # Generate lcov + HTML, but don't try to open a browser in CI
      - name: Generate coverage report (HTML + lcov)
        run: |
          make cov
          cargo llvm-cov report --html

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/llvm-cov/html/
          retention-days: 30
